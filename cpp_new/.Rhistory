definition = function(object){
return(abs(object@end-object@start)+1)
}
)
#abundance
setGeneric(name="setAbundance",
def=function(object,abn){
standardGeneric("setAbundance")
}
)
setMethod(f="setAbundance",
signature = "Segment",
definition = function(object,abn){
object@abn<-abn
validObject(object)
return(object)
}
)
setGeneric(name="getAbundance",
def=function(object){
standardGeneric("getAbundance")
}
)
setMethod(f="getAbundance",
signature = "Segment",
definition = function(object){
return(object@abn)
}
)
#sequence
setGeneric(name="setSeq",
def=function(object,abn){
standardGeneric("setSeq")
}
)
setMethod(f="setSeq",
signature = "Segment",
definition = function(object,seq){
object@seq<-seq
validObject(object)
return(object)
}
)
setGeneric(name="getSeq",
def=function(object){
standardGeneric("getSeq")
}
)
setMethod(f="getSeq",
signature = "Segment",
definition = function(object){
return(object@seq)
}
)
setGeneric(name="setSeq",
def=function(object,abn){
standardGeneric("setSeq")
}
)
setMethod(f="setSeq",
signature = "Segment",
definition = function(object,seq){
object@seq<-seq
validObject(object)
return(object)
}
)
setGeneric(name="setSeq",
def=function(object,abn){
standardGeneric("setSeq")
}
)
setMethod(f="setSeq",
signature = "Segment",
definition = function(object,seq){
object@seq<-seq
validObject(object)
return(object)
}
)
setGeneric(name="setSeq",
def=function(object,abn){
standardGeneric("setSeq")
}
)
setMethod(f="setSeq",
signature = "Segment",
definition = function(object,seq){
object@seq<-seq
validObject(object)
return(object)
}
)
setGeneric(name="setSequence",
def=function(object,abn){
standardGeneric("setSequence")
}
)
setMethod(f="setSequence",
signature = "Segment",
definition = function(object,seq){
object@seq<-seq
validObject(object)
return(object)
}
)
setGeneric(name="setSequence",
def=function(object,abn){
standardGeneric("setSequence")
}
)
setMethod(f="setSequence",
signature = "Segment",
definition = function(object,seq){
object@seq<-seq
validObject(object)
return(object)
}
)
getAbundance(a)
getSample(a)
setSample(a,"MH005")
mydata<-read.csv("~/Bureau/College.csv")
mydata<-read.csv("~/Bureau/Statistic\ learning\ course/College.csv")
mydata
head(mydata)
rownames(mydata)<- mydata[,1]
fix(mydata)
mydata
mydata
mydata[,-1]
mydata<-mydata[,-1]
head(mydata)
fix(mydata)
summary(mydata)
pairs(mydata[,1:10])
pairs(mydata[,1:2])
pairs(mydata[,1])
pairs(mydata[,1], mydata[,2])
pairs(mydata[,c(1,4)])
plot(mydata$Outstate, mydata$Private)
adv<- read.csv(file="~/Bureau/Statistic\ learning\ course/Advertising.csv")
adv
plot(adv$TV, adv$Sales,pch=19)
plot(adv$TV, adv$Sales)
installed.packages()
a=list(x=1,y=2)
b=list(x=2,y=10)
rbind(a,b)
rbind(a,NULL)
distances<- read.csv(file="~/Bureau/Stage/distance_phylo.txt", header = TRUE)
distances
distances<- read.csv(file="~/Bureau/Stage/distance_phylo.txt", header = TRUE, sep = ="\t")
distances<- read.csv(file="~/Bureau/Stage/distance_phylo.txt", header = TRUE, sep ="\t")
head(distances)
distances$Sample<-as.character(distances$Sample)
col<-ncol(distances)-1
row<-nrow(distances)
# Give the chart file a name.
# png(file = plot_file, width = 1000)
# Plot the bar chart.
plot(0,0, xlab = "Point", ylab = "Distance",
main = "Phylo distance", xlim=c(1,col+1), ylim=c(min(distances[,2:(col+1)]),max(distances[,2:(col+1)])))
axis(1, at=c(1:col), labels=colnames(distances[,2:(col+1)]))
apply(distances,1,FUN=function(x){print(x);lines(as.numeric(x[2:(col+1)]), type = "o", col = "blue")})
# Save the file.
# dev.off()
install.packages("Rmarkdow")
install.packages("rmarkdown")
install.packages("tibble")
result <- lmer(distance ~ reg + win + (1 | Sample), data = data2)
library(lme4)
library(devtools)
install("devtools")
install.packages("devtools")
install.packages("curl")
install.packages("~/Bureau/tibble-master.zip", repos = NULL, type = "win.binary")
result
library(reshape2)
library(lme4)
input_file="/home/duongtienhau/Bureau/Stage/distance.txt"
input_file="/data/projects/rmgs/segmentation/datal/phylo_20/analyses/distance.txt"
distances<-read.csv(file=input_file, header = TRUE, sep = "\t")
distances$Sample<-as.character(distances$Sample)
#transform to long format
data2<- melt(distances,id.vars=c("Sample"))
colnames(data2)<- c("Sample", "condition", "distance")
for(i in 1:nrow(data2)){
str_element<-strsplit(substr(data2$condition[i],2,10000),split="_")
data2$reg[i]<-as.numeric(str_element[[1]][1])
data2$win[i]<-as.numeric(str_element[[1]][2])
}
result <- lmer(distance ~ reg + win + (1 | Sample), data = data2)
library(reshape2)
library(lme4)
input_file="/home/duongtienhau/Bureau/Stage/distance.txt"
input_file="/data/projects/rmgs/segmentation/datal/phylo_20/analyses/distance.txt"
distances<-read.csv(file=input_file, header = TRUE, sep = "\t")
distances$Sample<-as.character(distances$Sample)
#transform to long format
data2<- melt(distances,id.vars=c("Sample"))
colnames(data2)<- c("Sample", "condition", "distance")
for(i in 1:nrow(data2)){
str_element<-strsplit(substr(data2$condition[i],2,10000),split="_")
data2$reg[i]<-as.numeric(str_element[[1]][1])
data2$win[i]<-as.numeric(str_element[[1]][2])
}
result <- lmer(distance ~ reg + win + (1 | Sample), data = data2)
library(reshape2)
library(lme4)
input_file="/home/duongtienhau/Bureau/Stage/distance.txt"
input_file="/data/projects/rmgs/segmentation/datal/phylo_20/analyses/distance.txt"
distances<-read.csv(file=input_file, header = TRUE, sep = "\t")
distances$Sample<-as.character(distances$Sample)
#transform to long format
distances2<- melt(distances,id.vars=c("Sample"))
colnames(distances2)<- c("Sample", "condition", "distance")
for(i in 1:nrow(distances2)){
str_element<-strsplit(substr(distances2$condition[i],2,10000),split="_")
distances2$reg[i]<-as.numeric(str_element[[1]][1])
distances2$win[i]<-as.numeric(str_element[[1]][2])
}
result <- lmer(distance ~ reg + win + (1 | Sample), data = distances2)
library(reshape2)
library(lme4)
input_file="/home/duongtienhau/Bureau/Stage/distance.txt"
# input_file="/data/projects/rmgs/segmentation/datal/phylo_20/analyses/distance.txt"
distances<-read.csv(file=input_file, header = TRUE, sep = "\t")
distances$Sample<-as.character(distances$Sample)
#transform to long format
distances2<- melt(distances,id.vars=c("Sample"))
colnames(distances2)<- c("Sample", "condition", "distance")
for(i in 1:nrow(distances2)){
str_element<-strsplit(substr(distances2$condition[i],2,10000),split="_")
distances2$reg[i]<-as.numeric(str_element[[1]][1])
distances2$win[i]<-as.numeric(str_element[[1]][2])
}
result <- lmer(distance ~ reg + win + (1 | Sample), data = distances2)
anova(result)
install.packages("pbkrtest")
library(pbkrtest)
fitR <- lmer(distance ~ 1 + (1 | Sample), data = distances2)
KRmodcomp(result, fitR)
fitR
install.packages("httr")
library(reshape2)
head(mtcars)
carMelt<- melt(mtcars, id=c("carname","gear","cyl"), measure.vars = c=("mpg","hp"))
carMelt<- melt(mtcars, id=c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
mtcars
colnames(mtcars)
colnames(mtcars)<-c("carname",colnames(mtcars))
rownames(mtcars)
mtcars$carname<-rownames(mtcars)
carMelt<- melt(mtcars, id=c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
carMelt
pollution<-read.csv("~/Bureau/avgpm25.csv", header = TRUE)
pollution
summary(pollution$pm25)
boxplot(pollution$pm25, col = "blue")
hist(pollution$pm25, col="green")
hist(pollution$pm25, col="green", breaks = 20)
hist(pollution$pm25, col="green", breaks = 40)
table(pollution$region)
barplot(table(pollution$region))
boxplot(pm25~region, data=pollution, col="red")
with(pollution,plot(latitude, pm25))
library(datasets)
data(cars)
with(cars,plot(speed, dist))
pollution
str(pollution)
par(mfrow=c(1,2))
with(pollution, {plot(pm25,fibs);plot(pm25,longtitude)})
with(pollution, {plot(pm25,fips);plot(pm25,longtitude)})
with(pollution, {plot(pm25,fips);plot(pm25,longitude)})
with(pollution, {plot(pm25,fips);plot(pm25,longitude)})
par(mfrow=c(1,2))
with(pollution, {plot(pm25,fips);plot(pm25,longitude)})
?Devices
library(datasets)
library(lattice)
airquality
head(airquality)
xyplot(Ozone~Wind,data=airquality)
library(ggplot2)
str(mps)
mpg
srt(mpg)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(hwy,data=mpg)
qplot(hwy,data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy,data=mpg, facets = .~drv)
qplot(hwy,data=mpg, facets = drv~.)
x<-rnorm(12, mean=rep(1:3,each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each=4),sd=0.2)
plot(x,y, pch=19,cex=2)
text(x+0.05, y+0.05, labels = as.character(1:12))
df<-data.frame(x=x,y=y)
dist(df)
?dist
distxy<-dist(df)
hclustdf<- hclust(distxy)
hclustdf
plot(hclustdf)
kmeandf<- kmeans(df,centers=3)
kmeandf
kmeandf<- kmeans(df,centers=3)
kmeandf
kmeandf<- kmeans(df,centers=3)
kmeandf
plot(x,y, col= kmeandf$cluster, pch=19, cex=2)
kmeandf$cluster
points(kmeandf$centers,col=1:3, pch=3)
heat.colors()
heat.colors(10)
topo.colors(10)
library(grDevices)
colorRamp(c("Red","Blue"))
pal<-colorRamp(c("Red","Blue"))
pal(0)
pal(1)
pal(2)
pal(0.5)
pal(0.2)
pal<- colorRampPalette(c("red","yellow"))
pal(2)
pal(3)
library(RColorBrewer)
cols<-brewer.pal(3,"BuGn")
cols
pal<- colorRampPalette(cols)
image(vocano,col=pal(20))
image(volcano,col=pal(20))
brewer.pal.info
pm0<- read.table("Bureau/RD_501_88101_1999-0.txt", header = TRUE)
pm0<- read.table("Bureau/RD_501_88101_1999-0.txt", header = FALSE, comment.char = "#",sep="|",na.strings = "")
dim(pm0)
head(pm0)
cnames<-readLines("Bureau/RD_501_88101_1999-0.txt",1)
cnames
cnames<-strsplit(cnames,"|", fixed = TRUE)
cnames
colnames(pm0)<-cnames[-1]
colnames(pm0)
cnames[-1]
colnames(pm0)<-cnames[[1]]
colnames(pm0)
head(pm0)
colnames(pm0)<- make.names(cnames[[1]])
colnames(pm0)
pm1<- read.table("Bureau/RD_501_88101_2012-0.txt", header = FALSE,na.strings = "", sep="|", comment.char = "#")
colnames(pm1)<- make.names(cnames[[1]])
summary(pm0$Sample.Value)
summary(pm1$Sample.Value)
boxplot(pm0$Sample.Value,pm1$Sample.Value)
sampling
rbinom(100,size = 1, prob=0.1)
rbinom(100,size = 1, prob=0.5)
sample(1:10, size=5, replace = FALSE)
install.packages("devtools")
devtools::install_url("https://cran.r-project.org/src/contrib/rmarkdown_1.1.tar.gz")
set.seed(100)
rnorm(10)
rnorm(10)
rnorm(10)
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
gapCleaned<- read.table("Bureau/gapC.csv",header=TRUE, sep=",")
head(gapCleaned)
apply(gapCleaned, 2,mean)
tapply(gapCleaned$breastcancer, gapCleaned$continent, mean)
library(gplots)
library(ggplot2)
plotmeans(gapCleaned$breastcancer~gapCleaned$continent, digits=2, ccol=”red”, mean.labels=T, main=”Plot of breast cancer means by continent”)
plotmeans(gapCleaned$breastcancer~gapCleaned$continent, digits=2, ccol=”red”, mean.labels=T, main="Plot of breast cancer means by continent")
plotmeans(gapCleaned$breastcancer ~ gapCleaned$continent, digits=2, ccol="red", mean.labels=T, main="Plot of breast cancer means by continent")
install.packages("gplots")
library(gplots)
plotmeans(gapCleaned$breastcancer ~ gapCleaned$continent, digits=2, ccol="red", mean.labels=T, main="Plot of breast cancer means by continent")
boxplot(gapCleaned$breastcancer ~ gapCleaned$continent, main="Breast cancer by continent (mean is black dot)", xlab="continents", ylab="new cases per 100,00 residents", col=rainbow(7))
aov_cont<- aov(gapCleaned$breastcancer ~ gapCleaned$continent)
summary(aov_cont)
tuk<- TukeyHSD(aov_cont)
tuk
?aov
View(distances)
install.packages("MASS")
install.packages("MASS")
library(MASS)
Boston
name(Boston)
names(Boston)
?Boston
lm.f<- lm(medv~lstat,Boston)
lm.f
summary(lm.f)
confint(lm.f)
plot(Boston$lstat, Boston$medv)
abline(lm.f)
par(mfrow=c(2,2))
plot(lm.f)
plot ( predict ( lm . fit ) , residuals ( lm . fit ) )
plot ( predict ( lm.f ) , residuals ( lm.f ) )
plot ( hatvalues ( lm.f ) )
lm.f<- lm(medv~lstat+age,Boston)
summary(lm.f)
setwd("/home/duongtienhau/Bureau/Stage/rmgspipeline/abncounting/cpp_new")
fc <- file("MH0015.final")
mylist <- strsplit(readLines(fc), "\t")
mylist[[1]]
length(mylist[[1]])
mylist[[1]][1]
scaffold_lst=list()
filename="MH0015.final"
fc <- file(filename)
for(line in readLines(fc)){
element=strsplit(line)
element[[1]][1]
break
}
filename="MH0015.final"
fc <- file(filename)
for(line in readLines(fc)){
element=strsplit(line,"\t")
element[[1]][1]
break
}
filename="MH0015.final"
fc <- file(filename)
for(line in readLines(fc)){
element=strsplit(line,"\t")
element
break
}
filename="MH0015.final"
fc <- file(filename)
for(line in readLines(fc)){
element=strsplit(line,"\t")
element
}
filename="MH0015.final"
fc <- file(filename)
lines=readLines(fc);
for(line : lines ){
element=strsplit(line,"\t")
element
}
filename="MH0015.final"
fc <- file(filename)
lines=readLines(fc)
for(line in lines) {
element=strsplit(line,"\t")
class(element)
break
}
for(line in lines) {
element=strsplit(line,"\t")
element
break
}
class(lines)
element=strsplit(line[1],"\t")
element
element[1]
element[[1]]
element[[1]][[1]]
element[[1]][1]
scaffold_lst=list()
for(line in lines) {
element=strsplit(line,"\t")
scaffold_lst[element[[1]][1]]=as.numeric(element[[1]][-1])
}
warnings()
element[[1]][-1]
element[[1]]
as.numeric(element[[1]][-1])
filename="MH0015.final"
fc <- file(filename)
lines=readLines(fc)
scaffold_lst=list()
for(line in lines) {
element=strsplit(line,"\t")
scaffold_lst[element[[1]][1]]=as.numeric(element[[1]][-1])
}
scaffold_lst[[1]]
scaffold_lst[[2]]
scaffold_lst[[3]]
class(scaffold_lst)
filename="MH0015.final"
fc <- file(filename)
lines=readLines(fc)
scaffold_lst=list()
for(line in lines) {
element=strsplit(line,"\t")
scaffold_lst[[element[[1]][1]]]=as.numeric(element[[1]][-1])
}
scaffold_lst[[1]]
scaffold_lst2=scaffold_lst
load("MH0015.abn.RData")
load("../MH0015.abn.RData")
scaffold_lst[[1]]
scaffold_lst2[[1]]
sum(scaffold_lst2[[1]]== scaffold_lst1[[1]])
sum(scaffold_lst2[[1]]== scaffold_lst[[1]])
scaffold_lst2[[1]]== scaffold_lst1[[1]]
scaffold_lst2[[1]]== scaffold_lst[[1]]
